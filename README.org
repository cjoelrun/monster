* Monster

[[https://travis-ci.org/rcbops-qa/monster][https://travis-ci.org/rcbops-qa/monster.png?branch=master]]

An OpenStack Orchestration Engine

** Requirements

   - Must have a chef server installed

     #+BEGIN_SRC sh
       source <(curl -s https://raw.github.com/rcbops/support-tools/master/chef-install/install-chef-server.sh)
     #+END_SRC

     - Must have knife.rb configured for chef server (the above command
       will take care of this)

       http://docs.opscode.com/chef/install_workstation.html

     - Once the script is done running you will have to logout and back in to use knife

   - Install packages

     #+BEGIN_SRC sh
       apt-get install -y git python-pip virtualenvwrapper python-dev libevent-dev
     #+END_SRC

   - Chef server must have rcbops-qa cookbook installed
     #+BEGIN_SRC sh
       git clone https://github.com/rcbops-qa/rcbops-qa.git /opt/cookbooks/rcbops-qa
       git clone https://github.com/opscode-cookbooks/yum.git /opt/cookbooks/yum
       knife cookbook upload -a -o /opt/cookbooks/
     #+END_SRC

** Installation

   - Clone the repo and install
     #+BEGIN_SRC sh
       git clone https://github.com/rcbops-qa/monster.git ~/monster
       virtualenv -p `which python2` ~/monster/.venv
       source ~/monster/.venv/bin/activate
       pip install -r ~/monster/requirements.txt
     #+END_SRC

     note: If you're on a small server I've experienced failed
     installs of gevent because there isn't enough memory. Adding swap
     fixed things.

   - put your credentials in ~secret.yaml~ at the top level of monster

     #+BEGIN_EXAMPLE
       rackspace:
         user: YOUR_USERNAME
         api_key: YOUR_API_KEY
         auth_url: https://identity.api.rackspacecloud.com/v2.0/
         region: dfw
         plugin: rackspace
     #+END_EXAMPLE

     if you use cloudfiles your user and password can also be placed
     in the secret.yaml

     #+BEGIN_EXAMPLE
       cloudfiles:
         user: YOUR_USER
         password: YOUR_PASSWORD
     #+END_EXAMPLE

     If you use razor to provision servers add it's api endpoint
     support clean up

     #+BEGIN_EXAMPLE
       razor:
         ip: RAZOR_IP
     #+END_EXAMPLE

** CLI
   ~compute.py~ and ~storage.py~ are the CLIs

*** Build

    Deploys an OpenStack cluster

    #+BEGIN_SRC sh
      compute.py build -n precise-default --branch master --template precise-default --config config.yaml --secret-path secret.yaml --destroy --log log.txt --log-level DEBUG --provisioner rackspace --test
    #+END_SRC

**** Arguments
     - name: name of the deployment
     - branch: branch rcbops cookbooks
     - template: name of template to use
     - config: path to config file
     - secret-path: path to secret config file
     - destroy: destroy after build or failure
     - dry: only build environment (will provision in cloud)
     - log: path to log file
     - log-level: level to log - INFO, DEBUG
     - provisioner: provisioner to use - razor, rackspace, openstack
     - test: run tests after build

*** Show

    Shows details about an OpenStack deployment

    #+BEGIN_SRC sh
      compute.py show -n precise-default
    #+END_SRC

**** Arguments
     - name: name of the deployment
     - config: path to config file
     - secret-path: path to secret config file
     - log: path to log file
     - log-level: level to log - INFO, DEBUG

*** Destroy

    Destroys an OpenStack deployment

    #+BEGIN_SRC sh
      compute.py destroy -n precise-default --config config.yaml --log log.txt --log-level DEBUG
    #+END_SRC

**** Arguments
     - name: name of the deployment
     - config: path to config file
     - secret-path: path to secret config file
     - log: path to log file
     - log-level: level to log - INFO, DEBUG

*** openrc

    Load openrc environment variables into shell. After loaded
    openstack cli commands will communicate to cluster.

    #+BEGIN_SRC sh
      compute.py openrc -n precise-default
    #+END_SRC

    #+BEGIN_SRC sh
      nova boot --image cirros-image --flavor 1
    #+END_SRC

**** Arguments
     - name: name of the deployment
     - config: path to config file
     - secret-path: path to secret config file
     - log: path to log file
     - log-level: level to log - INFO, DEBUG

*** Horizon

    Attempts to open Horizon in browser

    #+BEGIN_SRC sh
      compute.py horizon -n precise-default
    #+END_SRC

**** Arguments
     - name: name of the deployment
     - config: path to config file
     - secret-path: path to secret config file
     - log: path to log file
     - log-level: level to log - INFO, DEBUG

*** Test

    Runs tests on a running OpenStack cluster

    #+BEGIN_SRC sh
      compute.py test -n precise-default --config config.yaml --log log.txt --log-level DEBUG
    #+END_SRC

**** Arguments
     - name: name of the deployment
     - config: path to config file
     - secret-path: path to secret config file
     - log: path to log file
     - log-level: level to log - INFO, DEBUG

*** Upgrade

    Upgrades the deployment to the specified branch

    #+BEGIN_SRC sh
      compute.py upgrade -n precise-default -u v4.2.1 --log-level DEBUG
    #+END_SRC

**** Arguments
     - name: name of the deployment
     - upgrade-branch: branch to upgrade to
     - config: path to config file
     - secret-path: path to secret config file
     - log: path to log file
     - log-level: level to log - INFO, DEBUG

*** Tmux

    Opens an new tmux session with each node in a different window

    *Requires tmux version >= 1.8*

    #+BEGIN_SRC sh
      compute.py tmux -n precise-default
    #+END_SRC

**** Arguments
     - name: name of the deployment
     - config: path to config file
     - secret-path: path to secret config file
     - log: path to log file
     - log-level: level to log - INFO, DEBUG

** Development

*** iPython

    To make development of monster easier you can load deployments using iPython and mess around with them:

    1. Start ~ipython~ in top monster directory
    2. Run
       #+BEGIN_SRC python
       from tools.ipython import load
       deployment = load("yourdep")
       #+END_SRC
    4. profit???
